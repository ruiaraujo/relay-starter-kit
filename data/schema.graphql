input AddMessageInput {
  text: String!
  clientMutationId: String
}

type AddMessagePayload {
  messageEdge: MessageEdge
  viewer: User
  clientMutationId: String
}

input EditMessageInput {
  id: ID!
  text: String!
  clientMutationId: String
}

type EditMessagePayload {
  message: Message
  clientMutationId: String
}

type Message implements Node {
  # The ID of an object
  id: ID!
  text: String
  timestamp: Float
}

# A connection to a list of items.
type MessageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MessageEdge]
}

# An edge in a connection.
type MessageEdge {
  # The item at the end of the edge
  node: Message

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  addMessage(input: AddMessageInput!): AddMessagePayload
  removeMessage(input: RemoveMessageInput!): RemoveMessagePayload
  editMessage(input: EditMessageInput!): EditMessagePayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveMessageInput {
  id: ID!
  clientMutationId: String
}

type RemoveMessagePayload {
  deletedMessageId: ID
  viewer: User
  clientMutationId: String
}

type User implements Node {
  # The ID of an object
  id: ID!
  messages(after: String, first: Int, before: String, last: Int): MessageConnection
  name: String
  totalCount: Int
}
